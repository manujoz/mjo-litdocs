---
import { BadgeClickable } from "@/components/examples/badge/badge-clickable";
import { BadgeColors } from "@/components/examples/badge/badge-colors";
import { BadgeCssparts } from "@/components/examples/badge/badge-cssparts";
import { BadgeOffset } from "@/components/examples/badge/badge-offset";
import { BadgePositions } from "@/components/examples/badge/badge-positions";
import { BadgeSizes } from "@/components/examples/badge/badge-sizes";
import { BadgeTheme } from "@/components/examples/badge/badge-theme";
import { BadgeUsage } from "@/components/examples/badge/badge-usage";
import { BadgeVariants } from "@/components/examples/badge/badge-variants";
import { BadgeVisibility } from "@/components/examples/badge/badge-visibility";
import Codeblock from "@/components/ui/codeblock/Codeblock.astro";
import CodeblockPre from "@/components/ui/codeblock/CodeblockPre.astro";
import CodeExample from "@/components/ui/CodeExample.astro";
import List from "@/components/ui/list/List.astro";
import ListItem from "@/components/ui/list/ListItem.astro";
import Logger from "@/components/ui/logger/Logger.astro";
import Table from "@/components/ui/table/Table.astro";
import TableBody from "@/components/ui/table/TableBody.astro";
import TableCell from "@/components/ui/table/TableCell.astro";
import TableCellHeader from "@/components/ui/table/TableCellHeader.astro";
import TableHeader from "@/components/ui/table/TableHeader.astro";
import TableRow from "@/components/ui/table/TableRow.astro";
import Typography from "@/components/ui/Typography.astro";
import DocsLayout from "@/layouts/DocsLayout.astro";

const eventClickDetail = `{
    value?: string;
    label: string;
    position: MjoBadgePositions;
    color: MjoBadgeColors;
}`;
---

<DocsLayout
    title="Badge"
    description="A positioned notification badge component that displays informational content over other elements with comprehensive accessibility support."
    currentPath="/docs/components/badge"
>
    <article class="prose">
        <Typography tag="h1" size="title2" weight="bold">mjo-badge</Typography>
        <Typography class="explain" tag="p" spacing="md">
            A positioned notification badge component that displays informational content over other elements with comprehensive accessibility support.
        </Typography>

        <Typography tag="h2" size="title3" weight="bold" spacing="md">Import</Typography>
        <Typography class="explain" tag="p" spacing="md"> To start using the badge component, you need to import it in your component. </Typography>
        <Codeblock>
            <CodeblockPre language="typescript">
                {`import "mjo-litui/mjo-badge";`}
            </CodeblockPre>
        </Codeblock>

        <Typography tag="h2" size="title3" weight="bold" spacing="md">Usage</Typography>
        <Typography class="explain" tag="p" spacing="md">
            The basic usage of the badge component to display notification indicators. The badge will be positioned absolutely over its child element.
        </Typography>
        <CodeExample>
            <BadgeUsage client:load slot="preview" />
            <Codeblock showHeader slot="code">
                <CodeblockPre language="lit">
                    {
                        `import { LitElement, css, html } from "lit";
import { customElement } from "lit/decorators.js";

import "mjo-litui/mjo-avatar";
import "mjo-litui/mjo-badge";

@customElement("badge-usage")
export class BadgeUsage extends LitElement {
    render() {
        return html\`
            <mjo-badge label="5" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=15" name="Jimmy"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="New" color="success" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=16" name="Juliet"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="!" color="error" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=17" name="Jack"></mjo-avatar>
            </mjo-badge>
        \`;
    }

    static styles = [
        css\`
            :host {
                display: flex;
                gap: 2rem;
                align-items: center;
            }
        \`,
    ];
}
`
                    }
                </CodeblockPre>
            </Codeblock>
        </CodeExample>

        <Typography tag="h3" size="xxl" weight="bold" spacing="md">Colors</Typography>
        <Typography class="explain" tag="p" spacing="md">
            The badge component supports different color themes to convey different types of information.
        </Typography>
        <CodeExample>
            <BadgeColors client:load slot="preview" />
            <Codeblock showHeader slot="code">
                <CodeblockPre language="lit">
                    {
                        `import { LitElement, css, html } from "lit";
import { customElement } from "lit/decorators.js";

import "mjo-litui/mjo-avatar";
import "mjo-litui/mjo-badge";

@customElement("badge-colors")
export class BadgeColors extends LitElement {
    render() {
        return html\`
            <mjo-badge label="3" color="primary" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=15" name="Jimmy"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="7" color="secondary" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=16" name="Juliet"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="5" color="success" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=17" name="Jack"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="2" color="warning" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=18" name="Jill"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="!" color="error" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=19" name="Jack"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="8" color="info" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=20" name="Jill"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="1" color="default" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=21" name="Jack"></mjo-avatar>
            </mjo-badge>
        \`;
    }

    static styles = [
        css\`
            :host {
                display: flex;
                gap: 1.5rem;
                align-items: center;
            }
        \`,
    ];
}`
                    }
                </CodeblockPre>
            </Codeblock>
        </CodeExample>

        <Typography tag="h3" size="xxl" weight="bold" spacing="md">Sizes</Typography>
        <Typography class="explain" tag="p" spacing="md"> The badge component supports different sizes to fit various design needs. </Typography>
        <CodeExample>
            <BadgeSizes client:load slot="preview" />
            <Codeblock showHeader slot="code">
                <CodeblockPre language="lit">
                    {
                        `import { LitElement, css, html } from "lit";
import { customElement } from "lit/decorators.js";

import "mjo-litui/mjo-avatar";
import "mjo-litui/mjo-badge";

@customElement("badge-variants")
export class BadgeVariants extends LitElement {
    render() {
        return html\`
            <mjo-badge label="5" variant="solid" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=15" name="Jimmy"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="2" variant="flat" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=16" name="Juliet"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="8" variant="ghost" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=17" name="Jack"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="!" variant="brilliant" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=18" name="Jill"></mjo-avatar>
            </mjo-badge>
        \`;
    }

    static styles = [
        css\`
            :host {
                display: flex;
                gap: 1.5rem;
                align-items: center;
            }
        \`,
    ];
}`
                    }
                </CodeblockPre>
            </Codeblock>
        </CodeExample>

        <Typography tag="h3" size="xxl" weight="bold" spacing="md">Variants</Typography>
        <Typography class="explain" tag="p" spacing="md"> You can use different visual variants to customize the appearance of the badge. </Typography>
        <CodeExample>
            <BadgeVariants client:load slot="preview" />
            <Codeblock showHeader slot="code">
                <CodeblockPre language="lit">
                    {
                        `import { LitElement, css, html } from "lit";
import { customElement } from "lit/decorators.js";

import "mjo-litui/mjo-avatar";
import "mjo-litui/mjo-badge";

@customElement("badge-variants")
export class BadgeVariants extends LitElement {
    render() {
        return html\`
            <mjo-badge label="5" variant="solid" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=15" name="Jimmy"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="2" variant="flat" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=16" name="Juliet"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="8" variant="ghost" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=17" name="Jack"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="!" variant="brilliant" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=18" name="Jill"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="5" variant="shadow" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=18" name="Jill"></mjo-avatar>
            </mjo-badge>
        \`;
    }

    static styles = [
        css\`
            :host {
                display: flex;
                gap: 1.5rem;
                align-items: center;
            }
        \`,
    ];
}
`
                    }
                </CodeblockPre>
            </Codeblock>
        </CodeExample>

        <Typography tag="h3" size="xxl" weight="bold" spacing="md">Positions</Typography>
        <Typography class="explain" tag="p" spacing="md"> The badge can be positioned in different corners relative to the slotted element. </Typography>
        <CodeExample>
            <BadgePositions client:load slot="preview" />
            <Codeblock showHeader slot="code">
                <CodeblockPre language="lit">
                    {
                        `import { LitElement, css, html } from "lit";
import { customElement } from "lit/decorators.js";

import "mjo-litui/mjo-avatar";
import "mjo-litui/mjo-badge";

@customElement("badge-positions")
export class BadgePositions extends LitElement {
    render() {
        return html\`
            <mjo-badge label="TL" position="top-left" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=16" name="Juliet"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="TR" position="top-right" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=15" name="Jimmy"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="BL" position="bottom-left" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=18" name="Jill"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="BR" position="bottom-right" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=17" name="Jack"></mjo-avatar>
            </mjo-badge>
        \`;
    }

    static styles = [
        css\`
            :host {
                display: flex;
                gap: 2.5rem;
                align-items: center;
            }
        \`,
    ];
}`
                    }
                </CodeblockPre>
            </Codeblock>
        </CodeExample>

        <Typography tag="h3" size="xxl" weight="bold" spacing="md">Offset</Typography>
        <Typography class="explain" tag="p" spacing="md"> You can adjust the position of the badge using horizontal and vertical offsets. </Typography>
        <CodeExample>
            <BadgeOffset client:load slot="preview" />
            <Codeblock showHeader slot="code">
                <CodeblockPre language="lit">
                    {
                        `import { LitElement, css, html } from "lit";
import { customElement } from "lit/decorators.js";

import "mjo-litui/mjo-avatar";
import "mjo-litui/mjo-badge";

@customElement("badge-offset")
export class BadgeOffset extends LitElement {
    render() {
        return html\`
            <mjo-badge label="0" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=16" name="Juliet"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="X" offsetx="-20" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=16" name="Juliet"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="Y" offsety="20" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=16" name="Juliet"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="XY" offsetx="-20" offsety="20" show>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=16" name="Juliet"></mjo-avatar>
            </mjo-badge>
        \`;
    }

    static styles = [
        css\`
            :host {
                display: flex;
                gap: 2.5rem;
                align-items: center;
            }
        \`,
    ];
}`
                    }
                </CodeblockPre>
            </Codeblock>
        </CodeExample>

        <Typography tag="h3" size="xxl" weight="bold" spacing="md">Visibility Control</Typography>
        <Typography class="explain" tag="p" spacing="md"> You can programmatically control the visibility of badges using the provided methods. </Typography>
        <CodeExample>
            <BadgeVisibility client:load slot="preview" />
            <Codeblock showHeader slot="code">
                <CodeblockPre language="lit">
                    {
                        `import type { MjoBadge } from "mjo-litui/mjo-badge";
import type { MjoButton } from "mjo-litui/mjo-button";

import { LitElement, css, html } from "lit";
import { customElement, query, state } from "lit/decorators.js";

import "mjo-litui/mjo-avatar";
import "mjo-litui/mjo-badge";
import "mjo-litui/mjo-button";

@customElement("badge-visibility")
export class BadgeVisibility extends LitElement {
    @state() private badgeVisible = true;

    @query("mjo-badge") private $badge!: MjoBadge;

    render() {
        return html\`
            <mjo-badge label="5" color="error" ?show=\${this.badgeVisible}>
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=16" name="Juliet"></mjo-avatar>
            </mjo-badge>
            <mjo-button variant=\${this.#variant} @mjo-button:click=\${this.#toggleBadge}>\${this.#label}</mjo-button>
        \`;
    }

    get #label() {
        return this.badgeVisible ? "Hide Badge" : "Show Badge";
    }

    get #variant(): MjoButton["variant"] {
        return this.badgeVisible ? "default" : "ghost";
    }

    #toggleBadge() {
        this.badgeVisible = !this.badgeVisible;

        if (this.badgeVisible) {
            this.$badge?.showBadge();
        } else {
            this.$badge?.hideBadge();
        }
    }

    static styles = [
        css\`
            :host {
                display: flex;
                gap: 2.5rem;
                align-items: center;
            }
        \`,
    ];
}
`
                    }
                </CodeblockPre>
            </Codeblock>
        </CodeExample>

        <Typography tag="h3" size="xxl" weight="bold" spacing="md">Clickable</Typography>
        <Typography class="explain" tag="p" spacing="md"> The badge can be made clickable and will emit a custom event when clicked. </Typography>
        <CodeExample space="sm">
            <BadgeClickable client:load slot="preview" />
            <Codeblock showHeader slot="code">
                <CodeblockPre language="lit">
                    {
                        `import type { MjoBadgeClickEvent } from "mjo-litui/types/mjo-badge";

import { LitElement, css, html } from "lit";
import { customElement } from "lit/decorators.js";

import { printLog } from "@/lib/logger";

import "mjo-litui/mjo-avatar";
import "mjo-litui/mjo-badge";

@customElement("badge-clickable")
export class BadgeClickable extends LitElement {
    render() {
        return html\`
            <mjo-badge
                label="5"
                value="notifications"
                color="error"
                clickable
                show
                aria-label="5 new notifications, click to view"
                @mjo-badge:click=\${this.#handleBadgeClick}
            >
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=16" name="Juliet"></mjo-avatar>
            </mjo-badge>
            <mjo-badge
                label="3"
                value="messages"
                color="primary"
                clickable
                show
                aria-label="3 new messages, click to view"
                @mjo-badge:click=\${this.#handleBadgeClick}
            >
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=17" name="Bill"></mjo-avatar>
            </mjo-badge>
            <mjo-badge
                label="New"
                value="updates"
                color="success"
                clickable
                show
                aria-label="New updates available, click to view"
                @mjo-badge:click=\${this.#handleBadgeClick}
            >
                <mjo-avatar radius="large" src="https://i.pravatar.cc/150?img=18" name="Jimmy"></mjo-avatar>
            </mjo-badge>
        \`;
    }

    #handleBadgeClick(event: MjoBadgeClickEvent) {
        printLog({
            id: "badge-clickable-logger",
            message: event.detail,
            event,
        });
    }

    static styles = [
        css\`
            :host {
                display: flex;
                gap: 2.5rem;
                align-items: center;
            }
        \`,
    ];
}
`
                    }
                </CodeblockPre>
            </Codeblock>
        </CodeExample>
        <Logger id="badge-clickable-logger" initialMessage="Click the badges above to see event logs" />

        <Typography tag="h2" size="title3" weight="bold" spacing="md">Properties</Typography>
        <Typography class="explain" tag="p" spacing="md">Properties available on the mjo-badge component.</Typography>
        <Table>
            <TableHeader>
                <TableRow>
                    <TableCellHeader>Name</TableCellHeader>
                    <TableCellHeader>Type</TableCellHeader>
                    <TableCellHeader>Default</TableCellHeader>
                    <TableCellHeader>Description</TableCellHeader>
                </TableRow>
            </TableHeader>
            <TableBody>
                <TableRow>
                    <TableCell><code class="inline">color</code></TableCell>
                    <TableCell>
                        <code class="inline">{`primary|secondary|success`}</code>
                        <code class="inline">{`warning|error|info|default`}</code>
                    </TableCell>
                    <TableCell><code class="inline">{`primary`}</code></TableCell>
                    <TableCell>Color theme of the badge</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">size</code></TableCell>
                    <TableCell>
                        <code class="inline">{`small|medium|large`}</code>
                    </TableCell>
                    <TableCell><code class="inline">{`medium`}</code></TableCell>
                    <TableCell>Size of the badge</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">variant</code></TableCell>
                    <TableCell>
                        <code class="inline">{`solid|flat|ghost|brilliant|shadow`}</code>
                    </TableCell>
                    <TableCell><code class="inline">{`solid`}</code></TableCell>
                    <TableCell>Visual variant style</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">position</code></TableCell>
                    <TableCell>
                        <code class="inline">{`top-right|top-left`}</code>
                        <code class="inline">{`bottom-right|bottom-left`}</code>
                    </TableCell>
                    <TableCell><code class="inline">{`top-right`}</code></TableCell>
                    <TableCell>Position relative to the slotted element</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">label</code></TableCell>
                    <TableCell>
                        <code class="inline">{`string`}</code>
                    </TableCell>
                    <TableCell><code class="inline">{`""`}</code></TableCell>
                    <TableCell>The content to display in the badge</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">value</code></TableCell>
                    <TableCell>
                        <code class="inline">{`string`}</code>
                    </TableCell>
                    <TableCell><code class="inline">{`undefined`}</code></TableCell>
                    <TableCell>Optional value associated with the badge</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">offsetx</code></TableCell>
                    <TableCell>
                        <code class="inline">{`number`}</code>
                    </TableCell>
                    <TableCell><code class="inline">{`0`}</code></TableCell>
                    <TableCell>Horizontal offset in pixels</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">offsety</code></TableCell>
                    <TableCell>
                        <code class="inline">{`number`}</code>
                    </TableCell>
                    <TableCell><code class="inline">{`0`}</code></TableCell>
                    <TableCell>Vertical offset in pixels</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">show</code></TableCell>
                    <TableCell>
                        <code class="inline">{`boolean`}</code>
                    </TableCell>
                    <TableCell><code class="inline">{`false`}</code></TableCell>
                    <TableCell>Whether the badge is visible</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">disabled</code></TableCell>
                    <TableCell>
                        <code class="inline">{`boolean`}</code>
                    </TableCell>
                    <TableCell><code class="inline">{`false`}</code></TableCell>
                    <TableCell>Whether the badge is disabled</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">clickable</code></TableCell>
                    <TableCell>
                        <code class="inline">{`boolean`}</code>
                    </TableCell>
                    <TableCell><code class="inline">{`false`}</code></TableCell>
                    <TableCell>Whether the badge can be clicked</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">hideOutline</code></TableCell>
                    <TableCell>
                        <code class="inline">{`boolean`}</code>
                    </TableCell>
                    <TableCell><code class="inline">{`false`}</code></TableCell>
                    <TableCell>Whether to hide the border outline</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">ariaDescribedBy</code></TableCell>
                    <TableCell>
                        <code class="inline">{`string`}</code>
                    </TableCell>
                    <TableCell><code class="inline">{`undefined`}</code></TableCell>
                    <TableCell>Reference to describing elements</TableCell>
                </TableRow>
            </TableBody>
        </Table>

        <Typography tag="h2" size="title3" weight="bold" spacing="md">API</Typography>
        <Typography class="explain" tag="p" spacing="md">Methods available on the mjo-badge component.</Typography>
        <Table>
            <TableHeader>
                <TableRow>
                    <TableCellHeader>Name</TableCellHeader>
                    <TableCellHeader>Parameters</TableCellHeader>
                    <TableCellHeader>Returns</TableCellHeader>
                    <TableCellHeader>Description</TableCellHeader>
                </TableRow>
            </TableHeader>
            <TableBody>
                <TableRow>
                    <TableCell><code class="inline">showBadge()</code></TableCell>
                    <TableCell>-</TableCell>
                    <TableCell><code class="inline">{`void`}</code></TableCell>
                    <TableCell>Shows the badge</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">hideBadge()</code></TableCell>
                    <TableCell>-</TableCell>
                    <TableCell><code class="inline">{`void`}</code></TableCell>
                    <TableCell>Hides the badge</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">toggleBadge()</code></TableCell>
                    <TableCell>-</TableCell>
                    <TableCell><code class="inline">{`void`}</code></TableCell>
                    <TableCell>Toggles badge visibility</TableCell>
                </TableRow>
            </TableBody>
        </Table>

        <Typography tag="h2" size="title3" weight="bold" spacing="md">Events</Typography>
        <Typography class="explain" tag="p" spacing="md">The mjo-badge has the following events available:</Typography>
        <Table>
            <TableHeader>
                <TableRow>
                    <TableCellHeader>Name</TableCellHeader>
                    <TableCellHeader>Detail</TableCellHeader>
                    <TableCellHeader>Description</TableCellHeader>
                </TableRow>
            </TableHeader>
            <TableBody>
                <TableRow>
                    <TableCell><code class="inline">mjo-badge:click</code></TableCell>
                    <TableCell>
                        <pre>{eventClickDetail}</pre>
                    </TableCell>
                    <TableCell>Fired when clickable badge is clicked</TableCell>
                </TableRow>
            </TableBody>
        </Table>

        <Typography tag="h2" size="title3" weight="bold" spacing="md">Theming</Typography>
        <Typography class="explain" tag="p" spacing="md">
            The badge component supports comprehensive theming through CSS custom properties and parts.
        </Typography>

        <Typography tag="h3" size="xl" weight="bold" spacing="md">CSS Variables</Typography>
        <Table>
            <TableHeader>
                <TableRow>
                    <TableCellHeader>Property</TableCellHeader>
                    <TableCellHeader>Default</TableCellHeader>
                    <TableCellHeader>Description</TableCellHeader>
                </TableRow>
            </TableHeader>
            <TableBody>
                <TableRow>
                    <TableCell><code class="inline">--mjo-badge-border-width</code></TableCell>
                    <TableCell><code class="inline">{`2px`}</code></TableCell>
                    <TableCell>Border width of the badge</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">--mjo-badge-animation-duration</code></TableCell>
                    <TableCell><code class="inline">{`0.2s`}</code></TableCell>
                    <TableCell>Animation duration for scaling</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">--mjo-badge-focus-outline-width</code></TableCell>
                    <TableCell><code class="inline">{`2px`}</code></TableCell>
                    <TableCell>Width of focus outline</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">--mjo-badge-focus-outline-offset</code></TableCell>
                    <TableCell><code class="inline">{`1px`}</code></TableCell>
                    <TableCell>Offset of focus outline</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">--mjo-badge-background-color</code></TableCell>
                    <TableCell><code class="inline">{`Dynamic`}</code></TableCell>
                    <TableCell>Background color (varies by color prop)</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">--mjo-badge-color</code></TableCell>
                    <TableCell><code class="inline">{`Dynamic`}</code></TableCell>
                    <TableCell>Text color (varies by color prop)</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">--mjo-badge-box-shadow</code></TableCell>
                    <TableCell><code class="inline">{`--mjo-box-shadow-2`}</code></TableCell>
                    <TableCell>Box shadow (varies by color prop)</TableCell>
                </TableRow>
            </TableBody>
        </Table>

        <Typography tag="h3" size="xl" weight="bold" spacing="md">CSS Parts</Typography>
        <Table>
            <TableHeader>
                <TableRow>
                    <TableCellHeader>Part</TableCellHeader>
                    <TableCellHeader>Description</TableCellHeader>
                </TableRow>
            </TableHeader>
            <TableBody>
                <TableRow>
                    <TableCell><code class="inline">container</code></TableCell>
                    <TableCell>The main badge container element</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">icon</code></TableCell>
                    <TableCell>The icon element (via mjo-icon)</TableCell>
                </TableRow>
                <TableRow>
                    <TableCell><code class="inline">label</code></TableCell>
                    <TableCell>The typography element (via mjo-typography)</TableCell>
                </TableRow>
            </TableBody>
        </Table>

        <Typography tag="h3" size="xl" weight="bold" spacing="md">Theme interface</Typography>
        <Typography class="explain" tag="p" spacing="md">
            You can customize the badge component through the theme system by providing the following interface:
        </Typography>
        <Codeblock>
            <CodeblockPre language="typescript">
                {
                    `interface MjoBadgeTheme {
    borderWidth?: string;
    animationDuration?: string;
    focusOutlineWidth?: string;
    focusOutlineOffset?: string;
    backgroundColor?: string;
    color?: string;
}`
                }
            </CodeblockPre>
        </Codeblock>

        <Typography tag="h3" size="xl" weight="bold" spacing="md">Examples</Typography>

        <Typography tag="h4" size="lg" weight="bold" spacing="md">With CSS</Typography>
        <Typography class="explain" tag="p" spacing="md"> Use CSS parts or variables to customize the appearance of the badge. </Typography>
        <CodeExample>
            <BadgeCssparts client:load slot="preview" />
            <Codeblock showHeader slot="code">
                <CodeblockPre language="lit">
                    {
                        `import { LitElement, css, html } from "lit";
import { customElement } from "lit/decorators.js";

import "mjo-litui/mjo-avatar";
import "mjo-litui/mjo-badge";

@customElement("badge-cssparts")
export class BadgeCssparts extends LitElement {
    render() {
        return html\`
            <mjo-badge label="Custom" show class="css-parts">
                <mjo-avatar radius="large" size="large" src="https://i.pravatar.cc/150?img=16" name="Juliet"></mjo-avatar>
            </mjo-badge>
            <mjo-badge label="Themed" color="success" show class="css-vars">
                <mjo-avatar radius="large" size="large" src="https://i.pravatar.cc/150?img=17" name="Billy"></mjo-avatar>
            </mjo-badge>
        \`;
    }

    static styles = [
        css\`
            :host {
                display: flex;
                gap: 2.5rem;
                align-items: center;
            }
            .css-parts::part(container) {
                background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
                color: #111111;
                border: 2px solid #fff;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
            }
            .css-parts::part(label) {
                text-transform: uppercase;
            }
            .css-vars {
                --mjo-badge-border-width: 5px;
                --mjo-badge-background-color: #f50bc2;
                --mjo-badge-color: #a4fffa;
            }
        \`,
    ];
}
`
                    }
                </CodeblockPre>
            </Codeblock>
        </CodeExample>

        <Typography tag="h4" size="lg" weight="bold" spacing="md">Theme Customization</Typography>
        <Typography class="explain" tag="p" spacing="md"> You can customize the badge appearance through the theme system. </Typography>
        <CodeExample>
            <BadgeTheme client:only slot="preview" />
            <Codeblock showHeader slot="code">
                <CodeblockPre language="lit">
                    {
                        `import { LitElement, css, html } from "lit";
import { customElement } from "lit/decorators.js";

import "mjo-litui/mjo-badge";
import "mjo-litui/mjo-theme";

const badgeTheme = {
    components: {
        mjoBadge: {
            borderWidth: "3px",
            animationDuration: "0.3s",
            focusOutlineWidth: "3px",
        },
    },
};

@customElement("badge-theme")
export class BadgeTheme extends LitElement {
    render() {
        return html\`
            <mjo-theme .theme=\${badgeTheme}>
                <div style="display: flex; gap: 2rem; align-items: center;">
                    <mjo-badge label="Custom" show>
                        <button>Themed Badge</button>
                    </mjo-badge>
                    
                    <mjo-badge label="5" color="error" clickable show>
                        <button>Clickable Themed</button>
                    </mjo-badge>
                </div>
            </mjo-theme>
        \`;
    }
}`
                    }
                </CodeblockPre>
            </Codeblock>
        </CodeExample>
        <Typography tag="h2" size="title3" weight="bold" spacing="md">Accessibility</Typography>
        <Typography class="explain" tag="p" spacing="md"> The badge component includes comprehensive accessibility features: </Typography>
        <List listStyle="disc">
            <ListItem featuredText="ARIA Support"> Proper role attribution and live region announcements </ListItem>
            <ListItem featuredText="Keyboard Navigation"> Full keyboard support for clickable badges </ListItem>
            <ListItem featuredText="Screen Reader Support"> Announces badge changes and provides descriptive labels </ListItem>
            <ListItem featuredText="Focus Management"> Visible focus indicators with customizable styling </ListItem>
        </List>
        <Typography tag="h3" size="xl" weight="bold" spacing="md">Accessibility Best Practices</Typography>
        <List listStyle="disc">
            <ListItem>Use <code class="inline dense">aria-label</code> for badges containing important information</ListItem>
            <ListItem>For decorative badges, consider using <code class="inline dense">aria-hidden="true"</code></ListItem>
            <ListItem>Ensure sufficient color contrast for badge content</ListItem>
            <ListItem>Test with screen readers to verify announcements</ListItem>
        </List>
        <Typography tag="h2" size="title3" weight="bold" spacing="md">Type Definitions</Typography>
        <Typography class="explain" tag="p" spacing="md"> The badge component supports the following type definitions: </Typography>
        <Codeblock>
            <CodeblockPre language="typescript">
                {
                    `export type MjoBadgeSizes = "small" | "medium" | "large";
export type MjoBadgeVariants = "solid" | "flat" | "ghost" | "brilliant" | "shadow";
export type MjoBadgeColors = "primary" | "secondary" | "success" | "warning" | "error" | "info" | "default";
export type MjoBadgePositions = "top-right" | "top-left" | "bottom-right" | "bottom-left";

export interface MjoBadgeClickEvent extends CustomEvent {
    detail: {
        value?: string;
        label: string;
        position: MjoBadgePositions;
        color: MjoBadgeColors;
    };
}
`
                }
            </CodeblockPre>
        </Codeblock>
    </article>
</DocsLayout>

<style>
    .prose {
        max-width: none;
    }
    .explain {
        color: var(--mjo-foreground-color-low);
    }
</style>
