---
import type { BreadcrumbItem } from "@/types/docs";

import Footer from "@/components/layout/Footer.astro";
import Header from "@/components/layout/Header.astro";
import Sidebar from "@/components/layout/Sidebar.astro";
import Toc from "@/components/layout/Toc.astro";
import Breadcrumb from "@/components/ui/Breadcrumb.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";

export interface Props {
    title?: string;
    description?: string;
    currentPath?: string;
    breadcrumbItems?: BreadcrumbItem[];
}

const { title = "Documentation", description = "Complete documentation for MJO-LITUI component library", currentPath = "", breadcrumbItems = [] } = Astro.props;

const fullTitle = title === "Documentation" ? "MJO-LITUI - Documentation" : `${title} - MJO-LITUI`;

const breadcrumbItemsExample = [
    { label: "Home", href: "/" },
    { label: "Documentation", href: "/docs" },
    { label: "Theming", href: "/docs/theming" },
    { label: "Dark Mode", isCurrentPage: true },
];
---

<BaseLayout title={fullTitle} description={description}>
    <!-- Header -->
    <Header />
    <div class="docs-layout">
        <!-- Sidebar -->
        <Sidebar currentPath={currentPath} />

        <!-- Main Content Area -->
        <main class="docs-content">
            <!-- Breadcrumbs -->
            <Breadcrumb items={breadcrumbItemsExample} />

            <!-- Page Content -->
            <div class="docs-article">
                <slot />
            </div>

            <!-- Page Navigation -->
            <div class="docs-page-nav">
                <div class="page-nav-prev">
                    <!-- This will be populated dynamically based on the current page -->
                </div>
                <div class="page-nav-next">
                    <!-- This will be populated dynamically based on the current page -->
                </div>
            </div>
        </main>

        <!-- Table of Contents -->
        <Toc />
    </div>

    <!-- Footer -->
    <Footer />
</BaseLayout>

<style>
    /* Documentation Layout */
    .docs-layout {
        position: relative;
        display: grid;
        grid-template-columns: repeat(1, minmax(0, 1fr));
        gap: 32px;
    }

    @media (min-width: 1024px) {
        .docs-layout {
            grid-template-columns: 280px 1fr;
        }
    }

    @media (min-width: 1280px) {
        .docs-layout {
            grid-template-columns: 280px 1fr 240px;
        }
    }

    .docs-content {
        position: relative;
        padding-top: 2.5rem;
        padding-bottom: 4.5rem;
    }
</style>
